local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Ryan", HidePremium = false, SaveConfig = false, ConfigFolder = "OrionTest"})

--[[
Name = <string> - The name of the UI.
HidePremium = <bool> - Whether or not the user details shows Premium status or not.
SaveConfig = <bool> - Toggles the config saving in the UI.
ConfigFolder = <string> - The name of the folder where the configs are saved.
IntroEnabled = <bool> - Whether or not to show the intro animation.
IntroText = <string> - Text to show in the intro animation.
IntroIcon = <string> - URL to the image you want to use in the intro animation.
Icon = <string> - URL to the image you want displayed on the window.
CloseCallback = <function> - Function to execute when the window is closed.
]]


local Tab = Window:MakeTab({
	Name = "main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]
local Section = Tab:AddSection({
	Name = "Section 1"
})

--[[
Name = <string> - The name of the section.
]]
Tab:AddButton({
	Name = "Button!",
	Callback = function()
      		print("button pressed")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]
	
local Button = Section:Button({
	Name = "PLANT", -- String
	Callback = function()
        local args = {
            [1] = "FlowerGarden",
            [2] = "PlantSeed",
            [3] = 1, 2, 3, 4, 5
            [4] = "Diamond"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Instancing_InvokeCustomFromClient"):InvokeServer(unpack(args))
    end
})
Tab:AddButton({
	Name = "capsule",
	Callback = function()
		local args = {
			[1] = "FlowerGarden",
			[2] = "PlantSeed",
			[3] = 1, 2, 3, 4, 5
			[4] = "Diamond"
		}
		
		game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Instancing_InvokeCustomFromClient"):InvokeServer(unpack(args))
		
	end
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

Tab:AddButton({
	Name = "claim",
	Callback = function()
		local args = {
			[1] = "FlowerGarden",
			[2] = "ClaimPlant",
			[3] = 1, 2, 3, 4, 5
		}
		
		game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Instancing_FireCustomFromClient"):FireServer(unpack(args))
		end
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

local Toggle = Section:Toggle({
	Name = "Toggle", -- String
	Default = true, -- Boolean
	Callback = function(Bool)
        while wait() do
            local args = {
                [1] = "FlowerGarden",
                [2] = "PlantSeed",
                [3] = 1, 2, 3, 4, 5
                [4] = "Diamond"
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Instancing_InvokeCustomFromClient"):InvokeServer(unpack(args))
        end
})
local Toggle = Section:Toggle({
	Name = "capsule", -- String
	Default = true, -- Boolean
	Callback = function(Bool)
		while wait() do
            local args = {
                [1] = "FlowerGarden",
                [2] = "InstaGrowSeed",
                [3] = 1, 2, 3, 4, 5
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Instancing_InvokeCustomFromClient"):InvokeServer(unpack(args))
        end
	end
})
local Toggle = Section:Toggle({
	Name = "Toggle", -- String
	Default = true, -- Boolean
	Callback = function(Bool)
		while wait() do
            local args = {
                [1] = "FlowerGarden",
                [2] = "ClaimPlant",
                [3] = 1, 2, 3, 4, 5
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Instancing_FireCustomFromClient"):FireServer(unpack(args))
            end
	end
})
Tab:AddSlider({
	Name = "Slider",
	Min = 0,
	Max = 20,
	Default = 5,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "bananas",
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the slider.
Min = <number> - The minimal value of the slider.
Max = <number> - The maxium value of the slider.
Increment = <number> - How much the slider will change value when dragging.
Default = <number> - The default value of the slider.
ValueName = <string> - The text after the value number.
Callback = <function> - The function of the slider.
]]
Tab:AddDropdown({
	Name = "Dropdown",
	Default = "1",
	Options = {"1", "2"},
	Callback = function(Value)
		print(Value)
	end    
})

--[[
Name = <string> - The name of the dropdown.
Default = <string> - The default value of the dropdown.
Options = <table> - The options in the dropdown.
Callback = <function> - The function of the dropdown.
]]
OrionLib:Init()
